Ideas for more analyzer test coverage

Analyses like sidetable construction, CFG construction, handler tables, etc could benefit from
more extensive tests.
Writing unit tests is somewhat tedious and uses engine-internal APIs; such tests don't transfer
from unit to another.
For example, to test sidetable construction, specific cases are hand-written using binary
code as arrays.
Is the code valid? Is the output valid? How many different scenarios can be tested?
For a related utility, the CfgBuilder, we also need tests.
Many of the corner cases that apply to sidetable construction also apply to CFG construction.
That implies we should be able to reuse test cases across different units (analyses).

Idea: Analyzer tests

Add "analyzer tests" that can load a .wasm or a .bin.wast and then run a (static) analyzer
on the binary wasm modules and output analyzer results as text.
Expected output of an analysis can be checked in for various test programs and checked in.
Analyzers should be fairly stable so that output doesn't change often.
An analyzer could just be a pretty-printing of internal data structures, allowing normal
refactorings while allowing a stable output format.

Possible analyzer tests:

- sidetable construction:
  for every func,pc with a sidetable entry:
    label:  	    	 (Δpc Δstp valcount popcnt)
    struct.get/set	 (kind, offset)
    load/store		 (kind, inslength)
  for the sidetable reverse map:
    (start_pc, end_pc: stp)

- CFG construction:
  for every function:
    sorted (start_pc, end_pc) block start/end pairs

- Code validator callback:
  for every func,pc:
    operand stack types
    initialized state of each local

- Exception and stack-switching handler table construction:
  for every handler:
    (start_pc, end_pc) -> (tag, pc, stp, valstack_top)

- Random utils:
  - before/after probe util insertion points
  - control stack utility
  - decl filter matching
  - cfg printer

