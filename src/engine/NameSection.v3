// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The name section is a special custom section that is interpreted by
// engines to aid in debugging.
class NameSection extends CustomSection {
	def module: Module;
	private var decoded: bool;
	private var module_name: string;
	private var func_names: Array<string>;
	private var local_names: Array<Array<string>>;

	new(module, payload: Array<byte>) super("name", payload) { }

	def getModuleName() -> string {
		lazyDecode();
		return module_name;
	}
	def getFuncName(func: int) -> string {
		lazyDecode();
		if (func_names == null) return null;
		if (u32.view(func) >= func_names.length) return null;
		return func_names[func];
	}
	def getLocalName(func: int, local: int) -> string {
		lazyDecode();
		if (local_names == null) return null;
		if (u32.view(func) >= local_names.length) return null;
		var map = local_names[func];
		if (u32.view(local) >= map.length) return null;
		return map[local];
	}
	def lazyDecode() -> this {
		if (decoded) return;
		decoded = true;
		var extensions: Extension.set, limits = Limits.new().set(extensions);
		var error = ErrorGen.new("");
		var d = DataReader.new(payload);
		d.onError = error.onDataReaderError;
		var p = WasmParser.new(extensions, limits, module, error, d);

		if (d.match1(0)) {
			// module name
			var subsize = p.readU32("module name subsection size", limits.max_module_size);
			module_name = p.readUtf8String("module name");
		}
		if (d.match1(1)) {
			// function names
			var subsize = p.readU32("function name subsection size", limits.max_module_size);
			var count = p.readU32("function count", u32.view(module.functions.length));
			var total_func_count = module.functions.length;
			func_names = Array.new(total_func_count);
			for (i < count) {
				if (error.error()) break;
				var func = p.readFuncIndex();
				if (func < 0 || func >= total_func_count) break;
				func_names[func] = p.readUtf8String("function name");
			}
		}
		if (d.match1(2)) {
			// local names
			var subsize = p.readU32("local names subsection size", limits.max_module_size);
			var count = p.readU32("local function count", u32.view(module.functions.length));
			local_names = Array.new(int.view(module.functions.length));
			for (i < count) {
				if (error.error()) break;
				var func = p.readFuncIndex();
				if (func < 0) break;
				var count = p.readU32("local count", limits.max_num_locals);
				var names = Array<string>.new(int.view(count));
				local_names[func] = names;
				for (i < count) {
					if (error.error()) break;
					var local = p.readU32("local index", limits.max_num_locals);
					if (local >= names.length) break;
					names[local] = p.readUtf8String("local name");
				}
			}
		}
	}
}
