// Copyright 2024 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This class implements a monitor that is implemented in WebAssembly, i.e. as a Whamm
// module. Such modules have exported functions whose names describe how to attach
// behavior to events.

// Event names supported:
//   wasm:opcode:<mnemonic>			Before matching opcodes execute

// TODO:
//  - report callbacks
//  - binding callbacks
//  - define frame accessor methods
//  - externref in Virgil
class WhammMonitor(whamm: Module) extends Monitor {
	var onParseF: int = -1;
	var onInstantiateF: int = -1;
	var onStartF: int = -1;
	var onMainF: int = -1;
	var onInstanceF: int = -1;
	var onExitF: int = -1;
	var opcodePatterns: Array<List<(Opcode, Array<WhammParam>, FuncDecl)>>;
	var whammInstances: List<(Module, Instance, InstanceRef)>; // XXX: leaky
	var err: ErrorGen;

	new() {
		if (Trace.whamm) Trace.OUT.put1("parsing whamm monitor: %s", whamm.filename).ln();
		for (i < whamm.exports.length) {
			var e = whamm.exports[i], name = e.0, decl = e.1;
			if (!FuncDecl.?(decl)) continue;
			if (Trace.whamm) Trace.OUT.put2("  export %d: \"%s\" = ", i, name).ln();
			var func = FuncDecl.!(decl);
			var r = TextReader.new(whamm.filename, name);
			var t = Whamm.parseOpcodePattern(r), op = t.0, params = t.1;
			if (!r.ok) {
				// parse error
				Trace.OUT.put1("whamm warning: export[%d] function name is invalid opcode pattern", i).ln();
				r.renderCurrentLineWithCaret(Trace.OUT, r.error_column);
				Trace.OUT.sp().puts(r.error_msg);
				Trace.OUT.ln();
				if (Trace.fatal) System.error("MonitorError", "failed parsing whamm monitor");
			} else if (t.0 == Opcode.INVALID) {
				// no events matched
				if (Trace.whamm) Trace.OUT.puts("no events matched").ln();
			} else {
				// ok, add opcode pattern to table
				if (Trace.whamm) {
					Trace.OUT.put1("opcode %s", op.mnemonic);
					if (params.length > 0) Trace.OUT.putTuple(params, WhammParam.render).ln();
				}
				if (opcodePatterns == null) opcodePatterns = Array.new(Opcodes.count);
				opcodePatterns[op.tag] = List.new((op, params, func), opcodePatterns[op.tag]);
			}
		}
	}
	// monitors called on parsed modules
	def onParse(module: Module, err: ErrorGen) {
		this.err = err;
		// What extensions?
		var wi = getWhammInstance(module).0;
		if (wi == null) return;
		if (onParseF >= 0) {
			def moduleRef = ModuleRef.new(module);
			Execute.call(wi.functions[onParseF], [Value.Ref(moduleRef)]); // TODO: report traps
		}
		if (opcodePatterns == null) return;
		// iterate over the functions in the module
		for (i < module.functions.length) {
			var func = module.functions[i];
			if (func.imp != null) continue; // imported

			var extensions = Extension.set.all;
			var cv = CodeValidator.new(extensions, Limits.new().set(extensions), module, err);
			cv.probe = bytecodeProbe(module, wi, func, _, _, _);
			cv.validateFunc(func);
		}
	}

	def bytecodeProbe(module: Module, wi: Instance, func: FuncDecl, cv: CodeValidator, opcode_pos: int, opcode: Opcode) {
		var bp = opcodePatterns[opcode.tag];

		for (l = bp; l != null; l = l.tail) { // for every probe
			if (Trace.whamm) Trace.OUT.put3("  match func %q+%d: %s", func.render(module.names, _), opcode_pos, opcode.mnemonic).ln();
			def wf   = wi.functions[bp.head.2.func_index];
			def args = bindParams(cv, wf, wi, bp.head.1, opcode, false);
			if (args != null) Instrumentation.insertLocalProbe(module, func.func_index, opcode_pos, WhammProbe.new(wf, args));
		}
	}

	def bindParams(cv: CodeValidator, func: Function, wi: Instance,
			params: Array<WhammParam>, op: Opcode, nested: bool) -> Array<WhammArg> {
		var args = Array<WhammArg>.new(params.length);
	  	def expParams = func.sig.params;  // expected params of WasmFunction

	  	if (expParams.length != args.length) {
			err.at(cv.parser.decoder).WhammProbeError("whamm probe", "arity mismatch between wasm function params and whamm exported name");
			return null;
	 	}

		for (i < args.length) {
			var arg: WhammArg;
			match (params[i]) {
				DynamicLoc     => ; // TODO
				FrameAccessor  => {
					arg = WhammArg.FrameAccessor; // type externref
					if (expParams[i] != ValueTypes.EXTERNREF) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on frame accessor argument");
						return null;
				  	}
			  	}
				Pc             => {
					arg = WhammArg.Val(Values.box_i(cv.opcode_pos));
					if (expParams[i] != ValueType.I32) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on pc argument");
						return null;
				  	}
				}
				Func           => {
					arg = WhammArg.Val(Values.box_i(cv.func.func_index));
					if (expParams[i] != ValueType.I32) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on function index argument");
						return null;
					}
				}
				Imm(orig, j)   => {
					def imms = op.imms;
					def parser = dupParser(cv);
					def vals = Vector<Value>.new();

					for (i < imms.length) {
						match (imms[i]) {
							ARRAY_TYPE_INDEX  => vals.put(Values.box_u(parser.readU32("array type index", u32.!(-1))));
							BLOCK_TYPE        => vals.put(Values.box_i(parser.readTypeCode()));
							DATA_INDEX        => vals.put(Values.box_u(parser.readU32("data index", u32.!(-1))));
							ELEM_INDEX        => vals.put(Values.box_u(parser.readU32("elem index", u32.!(-1))));
							TAG_INDEX         => vals.put(Values.box_u(parser.readU32("tag index", u32.!(-1))));
							FIELD_INDEX       => vals.put(Values.box_u(parser.readU32("field index", u32.!(-1))));
							FUNC_INDEX        => vals.put(Values.box_u(parser.readU32("func index", u32.!(-1))));
							GLOBAL_INDEX      => vals.put(Values.box_u(parser.readU32("global index", u32.!(-1))));
							LABEL             => vals.put(Values.box_u(parser.readLabel()));
							LABELS            => {
								def labels = parser.readLabels();
								// NOTE hardcoded, because BR_TABLE is the only one that uses imm.LABELS
								vals.put(Values.box_i(labels.length - 1));
								vals.puta(Arrays.map(labels, Values.box_u));
							}
							LOCAL_INDEX       => vals.put(Values.box_u(parser.readU32("local index", u32.!(-1))));
							MEMARG            => {
								// TODO discuss memarg format
								def memarg = parser.readMemoryArg();
								vals.put(Values.box_u(memarg.flags));
								vals.put(Values.box_u(memarg.memory_index));
								vals.put(Values.box_u(u32.!(memarg.offset)));
							}
							MEMORY_INDEX      => vals.put(Values.box_u(parser.readU32("memory index", u32.!(-1))));
							HEAP_TYPE         => vals.put(Values.box_i(parser.readTypeCode()));
							SIG_INDEX         => vals.put(Values.box_u(parser.readU32("sig index", u32.!(-1))));
							STRUCT_TYPE_INDEX => vals.put(Values.box_u(parser.readU32("struct type index", u32.!(-1))));
							TABLE_INDEX       => vals.put(Values.box_u(parser.readU32("table index", u32.!(-1))));
							VALUE_TYPES       => ;		// TODO
							ZERO_BYTE         => vals.put(Values.box_u(parser.decoder.read1()));
							U32               => vals.put(Values.box_u(parser.readU32("imm U32", u32.!(-1))));
							I32               => vals.put(Values.box_i(parser.readI32()));
							I64               => vals.put(Values.box_l(parser.readI64()));
							F32               => vals.put(Values.box_fu32(parser.readF32()));
							F64               => vals.put(Values.box_du64(parser.readF64()));
							V128              => vals.put(Values.box_s(parser.readF64(), parser.readF64()));  // TODO incorrect?
							LANE_INDEX        => vals.put(Values.box_u(parser.decoder.read1()));
							BR_CAST           => ;    // TODO
							CATCHES           => ;		// TODO
							CONT_INDEX        => ;		// TODO
							EX_HANDLERS       => ;		// TODO
							SUS_HANDLERS      => ;		// TODO
						}
					}

					if (j >= vals.length) {
						match (op) {
							BR_TABLE, TRY_TABLE => return null;
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "immediate argument out of bounds");
								return null;
							}
						}
					}

					arg = WhammArg.Val(vals[j]);
					var t: ValueType;
					match (vals[j]) {
						Ref(_)     => ; // TODO
						I31(_)     => ; // TODO
						I32(_)     => t = ValueType.I32;
						I64(_)     => t = ValueType.I64;
						F32(_)     => t = ValueType.F32;
						F64(_)     => t = ValueType.F64;
						V128(_, _) => t = ValueType.V128;
					}
					if (expParams[i] != t) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction immediate type mismatch");
						return null;
					}
				}
				Arg(orig, j)   => {  // arg0 = first arg to bytecode
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (arg)");
						return null;
					}
					def io = Opcodes.stackDelta(cv.sig, op, dupParser(cv));
					def args = io.0;
					if (j >= args) {
						match (op) {
							CALL, CALL_INDIRECT => return null; // no match
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument out of bounds");
								return null;
							}
						}
					}
					def stk = cv.val_stack.peekn(args);
					def t   = stk[args - j - 1];
					if (expParams[i] != t) {
						match (op) {
							CALL, CALL_INDIRECT => return null; // no match
							_ => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "instruction argument type mismatch");
								return null;
							}
						}
					}
					arg = WhammArg.Operand(t, j - args + 1);
				}
				Local(orig, j) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (local)");
						return null;
					}
					if (j >= cv.locals.length) return null; // no match error
					def t = cv.locals[j];
					arg = WhammArg.Local(t, j);
					if (expParams[i] != t) return null; // no match error
				}
				Call(target, params) => {
					if (nested) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "nested function calls");
						return null;
					}

					def exports = wi.module.exports;
					def lookupR = FuncDecl.!(lookup(exports, target.image, Strings.equal, null));
					if (lookupR == null) {
						err.at(cv.parser.decoder).WhammProbeError("whamm probe", "function in the probe argument not found");
						return null;
					}

					def index = lookupR.func_index;
					def func = wi.functions[index];

					def whammArgs = bindParams(cv, WasmFunction.!(func), wi, params, op, true);
					if (whammArgs == null) return null;	// propagating error, not a good idea
					def args = if(whammArgs.length == 0, Values.NONE, Array<Value>.new(whammArgs.length));

					for (i < whammArgs.length) {
						var v: Value;
						match (whammArgs[i]) {
							FrameAccessor => {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "frame accessor used as an argument to a call");
								return null;
							}
							Val(val)      => v = val;
							Operand(t, i) => { // this error should not happen here (captured in Arg case)
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (arg)");
								return null;
							}
							Local(t, i)   => { // this error should not happen here (captured in Local case)
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "cannot use dynamic data in static context (local)");
								return null;
							}
						}
						args[i] = v;
					}
					// typecheck before execute
					def result = Execute.call(func, args); // XXX: runs on a new stack
					match (result) {
						Value(vals)       => {
							if (vals.length == 0) {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "function in call argument did not return a value (arity 0)");
								return null;
							}
							arg = WhammArg.Val(vals[0]);
							var t: ValueType;
							match (vals[0]) {
								Ref(_)     => ; // TODO
								I31(_)     => ; // TODO
								I32(_)     => t = ValueType.I32;
								I64(_)     => t = ValueType.I64;
								F32(_)     => t = ValueType.F32;
								F64(_)     => t = ValueType.F64;
								V128(_, _) => t = ValueType.V128;
							}
							if (expParams[i] != t) {
								err.at(cv.parser.decoder).WhammProbeError("whamm probe", "type mismatch on call return type");
								return null;
							}
						}
						Throw(throw)      => {
							err.at(cv.parser.decoder).WhammProbeError("whamm probe", "function in call argument did not return a value (throw)");
							return null;
						}
						StackSwitch(info) => {
							err.at(cv.parser.decoder).WhammProbeError("whamm probe", "function in call argument did not return a value (stack switch)");
							return null;
						}
					}
				}
			}
			args[i] = arg;
		}
		return args;
	}
	def onInstantiate(i: Instance) {
		if (onInstanceF < 0) return;
		var t = getWhammInstance(i.module), wi = t.0;
		if (wi == null) return;
		def instRef = InstanceRef.new(i);
		Execute.call(wi.functions[onInstanceF], [Value.Ref(instRef)]); // TODO: report traps
	}
	private def getWhammInstance(module: Module) -> (Instance, InstanceRef) {
		for (l = whammInstances; l != null; l = l.tail) {
			if (l.head.0 == module) return (l.head.1, l.head.2);
		}
		if (Trace.whamm) Trace.OUT.put2("Instantiating whamm module %s for %s", whamm.filename, module.filename).ln();
		var imports = Array<Exportable>.new(whamm.imports.length), err = ErrorGen.new(whamm.filename);
		var i = Instantiator.new(Extension.set.all, whamm, imports, err);
		i.processors.put(WizengModule.new());
		var instance = i.run();
		if (!err.ok()) return ErrorBuilder.new()
			.render(err.error_code, whamm.filename, err.section, err.error_index, err.error_pos, err.error_msg)
			.exit((null, null));
		var instRef = InstanceRef.new(instance);
		whammInstances = List.new((module, instance, instRef), whammInstances);
		return (instance, instRef);
	}

	def onFinish(i: Instance, r: Result) {
		def wi = getWhammInstance(i.module).0;
		def exports = wi.module.exports;
		// TODO allow this to fail if one does not define a wasm:exit function
		// TODO(precludes above): actually make wasm:exit part of parsing whamm module
		def lookupR = FuncDecl.!(lookup(exports, "wasm:exit", Strings.equal, null));
		if (lookupR == null) return;
		def index = lookupR.func_index;
		def func = wi.functions[index];

		Execute.call(func, Values.NONE);
	}
}

// A probe that adapts a Wasm function to be called by the engine-internal probing mechanism.
class WhammProbe(func: Function, sig: Array<WhammArg>) extends Probe {
	private def args = if(sig.length == 0, Values.NONE, Array<Value>.new(sig.length));

	def fire(loc: DynamicLoc) -> Resumption {
		for (i < sig.length) {
			var v: Value;
			match (sig[i]) {
				FrameAccessor => v = Value.Ref(loc.frame.getFrameAccessor().getMetaRef());
				Val(val)      => v = val;
				Operand(t, i) => v = loc.frame.getFrameAccessor().getOperand(i);
				Local(t, i)   => v = loc.frame.getFrameAccessor().getLocal(i);
			}
			args[i] = v;
		}
		Execute.call(func, args); // XXX: runs on a new stack
		return Resumption.Continue;
	}
}

def lookup<K, V>(v: Vector<(K, V)>, key: K, eq: (K, K) -> bool, default: V) -> V {
	for (i < v.length) {
		if (eq(key, v[i].0)) return v[i].1;
	}
	return default;
}

def dupParser(cv: CodeValidator) -> WasmParser {
	def decoder = cv.parser.decoder;
	def newDecoder = CodePtr.new(null);
	newDecoder.reset(Ranges.dup(decoder.data), decoder.pos, decoder.limit);
	return WasmParser.new(cv.parser.extensions, cv.parser.limits, cv.parser.module, cv.parser.err, newDecoder);
}
